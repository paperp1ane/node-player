{"version":3,"sources":["../src/Player.js"],"names":["EventEmitter","fs","mp3Duration","lame","Speaker","convertLyric","KEY_FRAME","Player","constructor","lists","params","history","paused","list","playingIndex","barTimer","map","ele","playing","length","lyrics","lyricPath","lyricSrc","existsSync","lyricInputSteam","readFileSync","toString","showProcessBar","currentPlayingSongName","name","index","i","keyIndex","currentLyricTime","nextLyricTime","currentLyricContent","setInterval","process","stdout","clearLine","write","parseInt","dura","src","cb","err","duration","console","log","message","Math","floor","read","createReadStream","stop","speaker","lameStream","unpipe","close","prev","clearInterval","play","next","findIndex","song","self","pool","emit","data","Decoder","pipe","once","onPlaying","f","lameFormat","push"],"mappings":"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","file":"Player.js","sourcesContent":["import { EventEmitter } from \"events\"\nimport fs from 'fs'\nimport mp3Duration from 'mp3-duration'\nimport lame from 'lame'\nimport Speaker from 'speaker'\nimport { convertLyric } from './utils'\n\nconst KEY_FRAME = [\n    \"∙∙∙∙∙\",\n    \"●∙∙∙∙\",\n    \"∙●∙∙∙\",\n    \"∙∙●∙∙\",\n    \"∙∙∙●∙\",\n    \"∙∙∙∙●\",\n    \"∙∙∙∙∙\"\n]\n\nexport default class Player extends EventEmitter {\n    constructor(lists = [], params) {\n        super()\n        this.history = []\n        this.paused = false\n        this.list = lists\n        this.playingIndex = 0\n        this.mp3Duration = 0\n        this.barTimer = null\n    }\n\n    get lists() {\n        if (!this.list) return null\n        return this.list.map(ele => ele['src'])\n    }\n\n    get playing() {\n        if (!this.history.length) return null\n    }\n\n    get lyrics() {\n        let lyrics = []\n        let lyricPath = this.list[this.playingIndex].lyricSrc\n        if (fs.existsSync(lyricPath)) {\n            let lyricInputSteam = fs.readFileSync(lyricPath).toString()\n            lyrics = convertLyric(lyricInputSteam)\n        }\n        return lyrics\n    }\n\n    // 展示播放进度&&歌词\n    showProcessBar() {\n        let currentPlayingSongName = this.list[this.playingIndex].name\n        let index = 0\n        let i = 0\n        let keyIndex = 0\n        let currentLyricTime = (this.lyrics[0] || [])[0]\n        let nextLyricTime = (this.lyrics[1] || [])[0]\n        let currentLyricContent = (this.lyrics[0] || [])[1]\n        this.barTimer = setInterval(() => {\n            i = i + 0.1\n            keyIndex = ++keyIndex % KEY_FRAME.length\n            process.stdout.clearLine()\n            process.stdout.write(`\\r${KEY_FRAME[keyIndex]} 正在播放:${currentPlayingSongName} [${parseInt(i)} / ${this.mp3Duration}s]  ${currentLyricContent}`)\n\n            if (this.lyrics && this.lyrics.length) {\n                if (i >= nextLyricTime) {\n                    nextLyricTime = (this.lyrics[index + 1] || [])[0]\n                    currentLyricTime = (this.lyrics[index] || [])[0]\n                    currentLyricContent = (this.lyrics[index] || [])[1]\n                    index++\n                }\n            }\n        }, 100)\n    }\n\n    //获取标签\n    dura(src, cb) {\n        mp3Duration(src, function (err, duration) {\n            if (err) return console.log(err.message);\n            return cb(null, Math.floor(duration))\n        });\n    }\n\n    //读取文件\n    read(src, cb) {\n        return cb(null, fs.createReadStream(src))\n    }\n\n    stop() {\n        if (!this.speaker) return\n        this.lameStream.unpipe()\n        this.speaker.Speaker.close()\n    }\n\n    //上一曲\n    prev() {\n        if (this.playingIndex <=0) {\n            this.playingIndex = this.list.length - 1\n        } else {\n            --this.playingIndex\n        }\n        clearInterval(this.barTimer)\n        process.stdout.clearLine()\n        this.stop()\n        this.play(this.playingIndex)\n        return\n    }\n\n    //下一曲\n    next() {\n        if (this.playingIndex >= this.list.length) {\n            this.playingIndex = 0\n        } else {\n            this.playingIndex++\n        }\n        clearInterval(this.barTimer)\n        process.stdout.clearLine()\n        this.stop()\n        this.play(this.playingIndex)\n        return\n    }\n\n    //播放\n    play(index = 0) {\n        if (this.list.length <= 0) return\n        if (typeof index !== 'number') {\n            index = this.list.findIndex((ele) => ele.name === index.name)\n            console.log('index', index);\n        }\n        if (index >= this.list.length) {\n            index = this.list.length - 1\n        }\n        this.playingIndex = index\n        let song = this.list[index]\n        let self = this //Player\n\n        this.read(song['src'], (err, pool) => {\n            if (err) {\n                return this.emit('error', err)\n            }\n            //异步\n            this.dura(song['src'], (err, data) => {\n                if (!err) {\n                    song.dura = data\n                    this.mp3Duration = data\n                    this.showProcessBar()\n                }\n            })\n            this.lameStream = new lame.Decoder()\n\n            pool\n                .pipe(this.lameStream)\n                .once('format', onPlaying)\n                .once('finish', () => this.next())\n\n            function onPlaying(f) {\n                self.lameFormat = f\n                let speaker = new Speaker(self.lameFormat)\n                // this [this] is decoder\n                self.emit('playing', song)\n                self.speaker = {\n                    'readableStream': this,\n                    'Speaker': speaker,\n                }\n                self.history.push(index)\n                this.pipe(speaker)\n                    .once('close', () => {\n                        self.emit('playend', song)\n                    })\n            }\n        })\n    }\n}"]}